<?xml version="1.0" encoding="UTF-8"?>
<Graph author="User" created="Wed May 04 18:14:45 CEST 2016" guiVersion="4.2.0.M1" id="1462379144818" licenseCode="Commercial Devel" name="new-graph" showComponentDetails="true">
<Global>
<Metadata id="Metadata0">
<Record fieldDelimiter="|" name="recordName1" recordDelimiter="\r\n" type="delimited">
<Field name="field1" type="string"/>
</Record>
</Metadata>
<GraphParameters>
<GraphParameterFile fileURL="workspace.prm"/>
</GraphParameters>
<RichTextNote backgroundColor="FAF6D6" folded="false" fontSize="medium" height="153" id="Note0" textColor="444444" width="264" x="53" y="66">
<attr name="text"><![CDATA[h3. New Note]]></attr>
</RichTextNote>
<Dictionary/>
</Global>
<Phase number="0">
<Node guiName="DataGenerator" guiX="53" guiY="285" id="DATA_GENERATOR" recordsNumber="10000000" type="DATA_GENERATOR">
<attr name="generate"><![CDATA[//#CTL2

// Generates output record.
function integer generate() {
	// comment
	$out.0.field1 = randomString(3,5);

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the generate. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if generate() throws an exception.
// function integer generateOnError(string errorMessage, string stackTrace) {
// }

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node fileURL="${DATAOUT_DIR}/big-data.txt" guiName="UniversalDataWriter" guiX="339" guiY="286" id="UNIVERSAL_DATA_WRITER" type="DATA_WRITER"/>
<Edge fromNode="DATA_GENERATOR:0" guiBendpoints="" guiRouter="Manhattan" id="Edge0" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (out)" toNode="UNIVERSAL_DATA_WRITER:0"/>
</Phase>
</Graph>
